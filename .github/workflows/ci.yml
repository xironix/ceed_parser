name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} - ${{ matrix.build-type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build-type: [Debug, Release]
        include:
          - os: ubuntu-latest
            install-deps: sudo apt-get update && sudo apt-get install -y libssl-dev libsqlite3-dev
          - os: macos-latest
            install-deps: brew install openssl sqlite3

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: ${{ matrix.install-deps }}

    - name: Create build directory
      run: mkdir -p build

    - name: Configure CMake
      working-directory: build
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
        fi
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}

    - name: Build
      working-directory: build
      run: cmake --build . --config ${{ matrix.build-type }}

    - name: Test
      working-directory: build
      run: ctest -C ${{ matrix.build-type }} --output-on-failure

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tools cppcheck

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --suppress=missingIncludeSystem --error-exitcode=1 \
                 --inline-suppr --template="{file}:{line}: {severity}: {message}" \
                 src/ include/

    - name: Run clang-tidy
      run: |
        mkdir -p build && cd build
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        cd ..
        find src include -name "*.c" -o -name "*.h" | xargs clang-tidy -p build/compile_commands.json

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libsqlite3-dev lcov

    - name: Configure CMake with coverage
      run: |
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS="--coverage -g -O0"

    - name: Build
      working-directory: build
      run: cmake --build .

    - name: Run tests for coverage
      working-directory: build
      run: ctest --output-on-failure

    - name: Generate coverage report
      working-directory: build
      run: |
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./build/coverage.info
        fail_ci_if_error: false

  sanitizers:
    name: Sanitizers
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, undefined, thread]

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libsqlite3-dev

    - name: Configure CMake with ${{ matrix.sanitizer }} sanitizer
      run: |
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS="-fsanitize=${{ matrix.sanitizer }} -g"

    - name: Build
      working-directory: build
      run: cmake --build .

    - name: Run tests with sanitizer
      working-directory: build
      run: ctest --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1:symbolize=1
        UBSAN_OPTIONS: print_stacktrace=1:symbolize=1
        TSAN_OPTIONS: second_deadlock_stack=1:symbolize=1 