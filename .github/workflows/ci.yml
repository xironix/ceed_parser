name: CEED Parser CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libssl-dev valgrind cppcheck clang-tidy

    - name: Download Wordlists
      run: |
        mkdir -p ${{github.workspace}}/data/wordlist
        cd ${{github.workspace}}/data/wordlist
        # Download BIP-39 English wordlist
        curl -s -o english.txt https://raw.githubusercontent.com/bitcoin/bips/master/bip-0039/english.txt
        # Add other wordlists if needed
        echo "Wordlist file contents (first 10 lines):"
        head -n 10 english.txt
        echo "Downloaded $(wc -l < english.txt) words to english.txt"
        ls -la

    - name: Static Analysis (cppcheck)
      run: |
        mkdir -p ${{github.workspace}}/reports
        cppcheck --enable=all --std=c11 --inconclusive --xml --xml-version=2 \
                 --suppressions-list=.cppcheck \
                 ${{github.workspace}}/src ${{github.workspace}}/include \
                 2> ${{github.workspace}}/reports/cppcheck-report.xml || true
        echo "Static analysis completed"

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        echo "Running tests..."
        export CEED_PARSER_DATA_DIR=${{github.workspace}}/data
        ctest -C ${{env.BUILD_TYPE}} --output-on-failure || true
        echo "Test execution completed"

    - name: Memory Check
      working-directory: ${{github.workspace}}/build
      if: false  # Disabled by default, set to true when ready for memory checking
      run: |
        echo "Running memory checks with Valgrind..."
        for test in $(ctest -N | grep "Test #" | cut -d: -f2); do
          valgrind --leak-check=full --error-exitcode=1 --xml=yes --xml-file=valgrind-${test}.xml ./test/test_runner ${test} || true
        done
        echo "Memory check completed"

    - name: Archive Reports
      uses: actions/upload-artifact@v3
      with:
        name: test-and-analysis-reports
        path: |
          ${{github.workspace}}/reports/
          ${{github.workspace}}/build/Testing/
          ${{github.workspace}}/build/*.xml 